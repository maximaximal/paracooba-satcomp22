#!/usr/bin/env python3

import json
import subprocess
import time
import logging
import os
import sys
import json
import multiprocessing

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

def check_process_status():
    status = 'READY'
#    output = subprocess.check_output(['ps', 'ax', '-ocomm']).decode("utf-8").strip()
#
#    if 'paracs' not in output:
#        status = 'ERROR'

    return status


def update_worker_status(p):
    print("UPDATE WORKER STATUS")
    while True:
        print("UPDATE WORKER STATUS WHILE TRUE")
        status = check_process_status()

        data = {"status": status, "timestamp": int(time.time())}
        with open(
                "/competition/worker_node_status.json",
                "w+",
        ) as statusfile:
            statusfile.write(json.dumps(data))
        print("WROTE STATUS FILE" + json.dumps(data))
        time.sleep(1)


if __name__ == "__main__":
    print("MAIN")
    leader_data = None
    with open("/competition/leader_node_status.json") as f:
        leader_data = json.load(f)
    print("GOT LEADER" + str(leader_data))
    leader_ip = leader_data["nodeIp"]
    print("GOT LEADER IP" + str(leader_ip))
    my_env = os.environ.copy()
    my_env["LD_LIBRARY_PATH"] = "/competition/"
    p = subprocess.Popen(["/competition/paracs",  "--worker", str(multiprocessing.cpu_count() - 1), "--known-remote", leader_ip, "--tcp-listen-address", "0.0.0.0"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=my_env)
    pid = p.pid
    with open('/competition/paracs.pid', 'w') as f:
        f.write(str(pid))
    print("DO POPEN")
    if len(sys.argv) > 1 and sys.argv[1] == '--no-status':
        print("Don't update status, as status is deactivated by --no-status")
    else:
        update_worker_status(p)
